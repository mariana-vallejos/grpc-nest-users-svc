// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface User {
  id: number;
  username: string;
  email: string;
  createdAt: string;
}

export interface CreateUserRequest {
  username: string;
  email: string;
}

export interface GetUserByIdRequest {
  id: number;
}

export interface UpdateUserRequest {
  id: number;
  username: string;
  email: string;
}

export interface DeleteUserRequest {
  id: number;
}

export interface Empty {
}

export interface GenericResponse {
  status: number;
  error?: string;
  user?: User | undefined;
  userList?: UserList | undefined;
  deleteResult?: DeleteUserResult | undefined;
}

export interface UserList {
  users: User[];
}

export interface DeleteUserResult {
  success: boolean;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  createUser(request: CreateUserRequest): Observable<GenericResponse>;

  getUserById(request: GetUserByIdRequest): Observable<GenericResponse>;

  getAllUsers(request: Empty): Observable<GenericResponse>;

  updateUser(request: UpdateUserRequest): Observable<GenericResponse>;

  deleteUser(request: DeleteUserRequest): Observable<GenericResponse>;
}

export interface UserServiceController {
  createUser(request: CreateUserRequest): Promise<GenericResponse> | Observable<GenericResponse> | GenericResponse;

  getUserById(request: GetUserByIdRequest): Promise<GenericResponse> | Observable<GenericResponse> | GenericResponse;

  getAllUsers(request: Empty): Promise<GenericResponse> | Observable<GenericResponse> | GenericResponse;

  updateUser(request: UpdateUserRequest): Promise<GenericResponse> | Observable<GenericResponse> | GenericResponse;

  deleteUser(request: DeleteUserRequest): Promise<GenericResponse> | Observable<GenericResponse> | GenericResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createUser", "getUserById", "getAllUsers", "updateUser", "deleteUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
